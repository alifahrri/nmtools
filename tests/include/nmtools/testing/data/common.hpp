#ifndef NMTOOLS_TESTING_DATA_COMMON_HPP
#define NMTOOLS_TESTING_DATA_COMMON_HPP

namespace nmtools::testing::data::common
{
    /**
     * @brief first row of magic matrix 5x5
     * 
     * @tparam T 
     */
    template <typename T>
    constexpr T v5[5] = {17,   24,    1,    8,   15};

    /**
     * @brief first row of magic matrix 10x10
     * 
     * @tparam T 
     */
    template <typename T>
    constexpr T v10[10] = {92,    99,     1,     8,    15,    67,    74,    51,    58,    40};

    /**
     * @brief first row of magic matrix 15x15
     * 
     * @tparam T 
     */
    template <typename T>
    constexpr T v15[15] = {122,   139,   156,   173,   190,   207,   224,     1,    18,    35,    52,    69,    86,   103,   120};

    /**
     * @brief first row of magic matrix 20x20
     * 
     * @tparam T 
     */
    template <typename T>
    constexpr T v20[20] = {400,     2,     3,   397,   396,     6,     7,   393,   392,    10,    11,   389,   388,    14,    15,   385,   384,    18,    19,   381};

    /**
     * @brief first row of magic matrix 25x25
     * 
     * @tparam T 
     */
    template <typename T>
    constexpr T v25[25] = {327,   354,   381,   408,   435,   462,   489,   516,   543,   570,   597,   624,     1,    28,    55,    82,   109,   136,   163,   190,   217,   244,   271,   298,   325};

    /**
     * @brief a range vector of size 5, similar to 1:N in octave wher N is the size of the vector
     * 
     * @tparam T 
     */
    template <typename T>
    constexpr T r5[5] = {1,    2,    3,    4,    5};

    /**
     * @brief a range vector of size 10, similar to 1:N in octave wher N is the size of the vector
     * 
     * @tparam T 
     */
    template <typename T>
    constexpr T r10[10] = {1,    2,    3,    4,    5,    6,    7,    8,    9,   10};
    
    /**
     * @brief a range vector of size 15, similar to 1:N in octave wher N is the size of the vector
     * 
     * @tparam T 
     */
    template <typename T>
    constexpr T r15[15] = {1,    2,    3,    4,    5,    6,    7,    8,    9,   10,   11,   12,   13,   14,   15};
    
    /**
     * @brief a range vector of size 20, similar to 1:N in octave wher N is the size of the vector
     * 
     * @tparam T 
     */
    template <typename T>
    constexpr T r20[20] = {1,    2,    3,    4,    5,    6,    7,    8,    9,   10,   11,   12,   13,   14,   15,   16,   17,   18,   19,   20};

    /**
     * @brief a range vector of size 25, similar to 1:N in octave wher N is the size of the vector
     * 
     * @tparam T 
     */
    template <typename T>
    constexpr T r25[25] = {1,    2,    3,    4,    5,    6,    7,    8,    9,   10,   11,   12,   13,   14,   15,   16,   17,   18,   19,   20,   21,   22,   23,   24,   25};
} // namespace nmtools::testing::data::common

namespace nmtools::testing::data::common_matrix
{
    /**
     * @brief zeros of 3x3 matrix
     * 
     * @note that array cannot returned from functions by value
     * and cannot be targets of most cast expressions.
     * @tparam T desired element type
     */
    template <typename T>
    constexpr T z3x3[3][3] = {
        {0, 0, 0},
        {0, 0, 0},
        {0, 0, 0},
    };

    template <typename T>
    constexpr T z5x5[5][5] = {
        {0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0},
    };

    template <typename T>
    constexpr T z10x10[10][10] = {
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    };

    template <typename T>
    constexpr T z15x15[15][15] = {
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    };

    template <typename T>
    constexpr T z20x20[20][20] = {
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    };

    template <typename T>
    constexpr T z25x25[25][25] = {
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    };

    template <typename T>
    constexpr T o3x3[3][3] = {
        {1, 1, 1},
        {1, 1, 1},
        {1, 1, 1},
    };

    template <typename T>
    constexpr T o5x5[5][5] = {
        {1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1},
    };

    template <typename T>
    constexpr T o10x10[10][10] = {
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
    };

    template <typename T>
    constexpr T o15x15[15][15] = {
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
    };

    template <typename T>
    constexpr T o20x20[20][20] = {
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
    };

    template <typename T>
    constexpr T o25x25[25][25] = {
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
    };

    template <typename T>
    constexpr T e3x3[3][3] = {
        {1,   0,   0},
        {0,   1,   0},
        {0,   0,   1},
    };

    template <typename T>
    constexpr T e5x5[5][5] = {
        {1,   0,   0,   0,   0},
        {0,   1,   0,   0,   0},
        {0,   0,   1,   0,   0},
        {0,   0,   0,   1,   0},
        {0,   0,   0,   0,   1},
    };

    template <typename T>
    constexpr T e10x10[10][10] = {
        {1,   0,   0,   0,   0,   0,   0,   0,   0,   0},
        {0,   1,   0,   0,   0,   0,   0,   0,   0,   0},
        {0,   0,   1,   0,   0,   0,   0,   0,   0,   0},
        {0,   0,   0,   1,   0,   0,   0,   0,   0,   0},
        {0,   0,   0,   0,   1,   0,   0,   0,   0,   0},
        {0,   0,   0,   0,   0,   1,   0,   0,   0,   0},
        {0,   0,   0,   0,   0,   0,   1,   0,   0,   0},
        {0,   0,   0,   0,   0,   0,   0,   1,   0,   0},
        {0,   0,   0,   0,   0,   0,   0,   0,   1,   0},
        {0,   0,   0,   0,   0,   0,   0,   0,   0,   1},
    };

    template <typename T>
    constexpr T e15x15[15][15] = {
        {1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
        {0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
        {0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
        {0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
        {0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
        {0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0},
        {0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0},
        {0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0},
        {0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0},
        {0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0},
        {0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0},
        {0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0},
        {0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0},
        {0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0},
        {0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1},
    };

    template <typename T>
    constexpr T e20x20[20][20] = {
        {1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
        {0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
        {0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
        {0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
        {0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
        {0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
        {0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
        {0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
        {0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
        {0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
        {0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0},
        {0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0},
        {0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0},
        {0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0},
        {0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0},
        {0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0},
        {0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0},
        {0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0},
        {0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0},
        {0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1},
    };

    template <typename T>
    constexpr T e25x25[25][25] = {
        {1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
        {0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
        {0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
        {0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
        {0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
        {0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
        {0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
        {0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
        {0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
        {0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
        {0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
        {0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
        {0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
        {0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
        {0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
        {0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0},
        {0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0},
        {0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0},
        {0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0},
        {0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0},
        {0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0},
        {0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0},
        {0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0},
        {0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0},
        {0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1},
    };

    /**
     * @brief 
     * 
     */
    namespace magic
    {
        /**
         * @brief 5x5 magic matrix template
         * 
         * @tparam T desired element type.
         * @note that c++ array is lvalue,
         * doing `auto var = m5x5<double>;`
         * will deduce the value of var 
         * to be `const double (* const&)[5])`
         */
        template <typename T>
        constexpr T m5x5[5][5] = {
            {17,   24,    1,    8,   15},
            {23,    5,    7,   14,   16},
            { 4,    6,   13,   20,   22},
            {10,   12,   19,   21,    3},
            {11,   18,   25,    2,    9},
        };
        /**
         * @brief 5x5 magic matrix with std::array storage and double dtype
         * 
         */
        // inline auto mad5x5 = cast(m5x5<double>);
        // inline auto maf5x5 = cast(m5x5<float>);
        /**
         * @brief 5x5 magic matrix with std::array storage and double dtype
         * 
         */
        // inline auto mvd5x5 = cast<nested_vec_t<double>>(mad5x5);
        // inline auto mvf5x5 = cast<nested_vec_t<float>>(maf5x5);
        /**
         * @brief 5x5 magic matrix with array::fixed_matrix as storage
         * 
         */
        /* TODO: find-out how to left-out specifying size of array */
        // inline auto mfd5x5 = cast<fdmat_t<5,5>>(mad5x5);
        // inline auto mff5x5 = cast<ffmat_t<5,5>>(maf5x5);

        /**
         * @brief 10x10 magic matrix
         * `octave> magic(10)`
         * 
         * @tparam T 
         */
        template <typename T>
        constexpr T m10x10[10][10] = {
            {92,    99,     1,     8,    15,    67,    74,    51,    58,    40},
            {98,    80,     7,    14,    16,    73,    55,    57,    64,    41},
            { 4,    81,    88,    20,    22,    54,    56,    63,    70,    47},
            {85,    87,    19,    21,     3,    60,    62,    69,    71,    28},
            {86,    93,    25,     2,     9,    61,    68,    75,    52,    34},
            {17,    24,    76,    83,    90,    42,    49,    26,    33,    65},
            {23,     5,    82,    89,    91,    48,    30,    32,    39,    66},
            {79,     6,    13,    95,    97,    29,    31,    38,    45,    72},
            {10,    12,    94,    96,    78,    35,    37,    44,    46,    53},
            {11,    18,   100,    77,    84,    36,    43,    50,    27,    59},
        };
        /**
         * @brief 5x5 magic matrix with std::array storage and double dtype
         * 
         */
        // inline auto mad10x10 = cast(m10x10<double>);
        // inline auto maf10x10 = cast(m10x10<float>);
        /**
         * @brief 5x5 magic matrix with std::array storage and double dtype
         * 
         */
        // inline auto mvd10x10 = cast<nested_vec_t<double>>(mad10x10);
        // inline auto mvf10x10 = cast<nested_vec_t<float>>(maf10x10);
        /**
         * @brief 5x5 magic matrix with array::fixed_matrix as storage
         * 
         */
        /* TODO: find-out how to left-out specifying size of array */
        // inline auto mfd10x10 = cast<fdmat_t<10,10>>(mad10x10);
        // inline auto mff10x10 = cast<ffmat_t<10,10>>(maf10x10);

        /**
         * @brief 15x15 magic matrix
         * `octave> magic(15)`
         * 
         * @tparam T 
         */
        template <typename T>
        constexpr T m15x15[15][15] = {
            {122,   139,   156,   173,   190,   207,   224,     1,    18,    35,    52,    69,    86,   103,   120},
            {138,   155,   172,   189,   206,   223,    15,    17,    34,    51,    68,    85,   102,   119,   121},
            {154,   171,   188,   205,   222,    14,    16,    33,    50,    67,    84,   101,   118,   135,   137},
            {170,   187,   204,   221,    13,    30,    32,    49,    66,    83,   100,   117,   134,   136,   153},
            {186,   203,   220,    12,    29,    31,    48,    65,    82,    99,   116,   133,   150,   152,   169},
            {202,   219,    11,    28,    45,    47,    64,    81,    98,   115,   132,   149,   151,   168,   185},
            {218,    10,    27,    44,    46,    63,    80,    97,   114,   131,   148,   165,   167,   184,   201},
            {  9,    26,    43,    60,    62,    79,    96,   113,   130,   147,   164,   166,   183,   200,   217},
            { 25,    42,    59,    61,    78,    95,   112,   129,   146,   163,   180,   182,   199,   216,     8},
            { 41,    58,    75,    77,    94,   111,   128,   145,   162,   179,   181,   198,   215,     7,    24},
            { 57,    74,    76,    93,   110,   127,   144,   161,   178,   195,   197,   214,     6,    23,    40},
            { 73,    90,    92,   109,   126,   143,   160,   177,   194,   196,   213,     5,    22,    39,    56},
            { 89,    91,   108,   125,   142,   159,   176,   193,   210,   212,     4,    21,    38,    55,    72},
            {105,   107,   124,   141,   158,   175,   192,   209,   211,     3,    20,    37,    54,    71,    88},
            {106,   123,   140,   157,   174,   191,   208,   225,     2,    19,    36,    53,    70,    87,   104},
        };
        /**
         * @brief 5x5 magic matrix with std::array storage and double dtype
         * 
         */
        // inline auto mad15x15 = cast(m15x15<double>);
        // inline auto maf15x15 = cast(m15x15<float>);
        /**
         * @brief 5x5 magic matrix with std::array storage and double dtype
         * 
         */
        // inline auto mvd15x15 = cast<nested_vec_t<double>>(mad15x15);
        // inline auto mvf15x15 = cast<nested_vec_t<float>>(maf15x15);
        /**
         * @brief 5x5 magic matrix with array::fixed_matrix as storage
         * 
         */
        /* TODO: find-out how to left-out specifying size of array */
        // inline auto mfd15x15 = cast<fdmat_t<15,15>>(mad15x15);
        // inline auto mff15x15 = cast<ffmat_t<15,15>>(maf15x15);

        template <typename T>
        constexpr T m20x20[20][20] = {
            {400,     2,     3,   397,   396,     6,     7,   393,   392,    10,    11,   389,   388,    14,    15,   385,   384,    18,    19,   381},
            { 21,   379,   378,    24,    25,   375,   374,    28,    29,   371,   370,    32,    33,   367,   366,    36,    37,   363,   362,    40},
            { 41,   359,   358,    44,    45,   355,   354,    48,    49,   351,   350,    52,    53,   347,   346,    56,    57,   343,   342,    60},
            {340,    62,    63,   337,   336,    66,    67,   333,   332,    70,    71,   329,   328,    74,    75,   325,   324,    78,    79,   321},
            {320,    82,    83,   317,   316,    86,    87,   313,   312,    90,    91,   309,   308,    94,    95,   305,   304,    98,    99,   301},
            {101,   299,   298,   104,   105,   295,   294,   108,   109,   291,   290,   112,   113,   287,   286,   116,   117,   283,   282,   120},
            {121,   279,   278,   124,   125,   275,   274,   128,   129,   271,   270,   132,   133,   267,   266,   136,   137,   263,   262,   140},
            {260,   142,   143,   257,   256,   146,   147,   253,   252,   150,   151,   249,   248,   154,   155,   245,   244,   158,   159,   241},
            {240,   162,   163,   237,   236,   166,   167,   233,   232,   170,   171,   229,   228,   174,   175,   225,   224,   178,   179,   221},
            {181,   219,   218,   184,   185,   215,   214,   188,   189,   211,   210,   192,   193,   207,   206,   196,   197,   203,   202,   200},
            {201,   199,   198,   204,   205,   195,   194,   208,   209,   191,   190,   212,   213,   187,   186,   216,   217,   183,   182,   220},
            {180,   222,   223,   177,   176,   226,   227,   173,   172,   230,   231,   169,   168,   234,   235,   165,   164,   238,   239,   161},
            {160,   242,   243,   157,   156,   246,   247,   153,   152,   250,   251,   149,   148,   254,   255,   145,   144,   258,   259,   141},
            {261,   139,   138,   264,   265,   135,   134,   268,   269,   131,   130,   272,   273,   127,   126,   276,   277,   123,   122,   280},
            {281,   119,   118,   284,   285,   115,   114,   288,   289,   111,   110,   292,   293,   107,   106,   296,   297,   103,   102,   300},
            {100,   302,   303,    97,    96,   306,   307,    93,    92,   310,   311,    89,    88,   314,   315,    85,    84,   318,   319,    81},
            { 80,   322,   323,    77,    76,   326,   327,    73,    72,   330,   331,    69,    68,   334,   335,    65,    64,   338,   339,    61},
            {341,    59,    58,   344,   345,    55,    54,   348,   349,    51,    50,   352,   353,    47,    46,   356,   357,    43,    42,   360},
            {361,    39,    38,   364,   365,    35,    34,   368,   369,    31,    30,   372,   373,    27,    26,   376,   377,    23,    22,   380},
            { 20,   382,   383,    17,    16,   386,   387,    13,    12,   390,   391,     9,     8,   394,   395,     5,     4,   398,   399,     1},
        };

        template <typename T>
        constexpr T m25x25[25][25] = {
            {327,   354,   381,   408,   435,   462,   489,   516,   543,   570,   597,   624,     1,    28,    55,    82,   109,   136,   163,   190,   217,   244,   271,   298,   325},
            {353,   380,   407,   434,   461,   488,   515,   542,   569,   596,   623,    25,    27,    54,    81,   108,   135,   162,   189,   216,   243,   270,   297,   324,   326},
            {379,   406,   433,   460,   487,   514,   541,   568,   595,   622,    24,    26,    53,    80,   107,   134,   161,   188,   215,   242,   269,   296,   323,   350,   352},
            {405,   432,   459,   486,   513,   540,   567,   594,   621,    23,    50,    52,    79,   106,   133,   160,   187,   214,   241,   268,   295,   322,   349,   351,   378},
            {431,   458,   485,   512,   539,   566,   593,   620,    22,    49,    51,    78,   105,   132,   159,   186,   213,   240,   267,   294,   321,   348,   375,   377,   404},
            {457,   484,   511,   538,   565,   592,   619,    21,    48,    75,    77,   104,   131,   158,   185,   212,   239,   266,   293,   320,   347,   374,   376,   403,   430},
            {483,   510,   537,   564,   591,   618,    20,    47,    74,    76,   103,   130,   157,   184,   211,   238,   265,   292,   319,   346,   373,   400,   402,   429,   456},
            {509,   536,   563,   590,   617,    19,    46,    73,   100,   102,   129,   156,   183,   210,   237,   264,   291,   318,   345,   372,   399,   401,   428,   455,   482},
            {535,   562,   589,   616,    18,    45,    72,    99,   101,   128,   155,   182,   209,   236,   263,   290,   317,   344,   371,   398,   425,   427,   454,   481,   508},
            {561,   588,   615,    17,    44,    71,    98,   125,   127,   154,   181,   208,   235,   262,   289,   316,   343,   370,   397,   424,   426,   453,   480,   507,   534},
            {587,   614,    16,    43,    70,    97,   124,   126,   153,   180,   207,   234,   261,   288,   315,   342,   369,   396,   423,   450,   452,   479,   506,   533,   560},
            {613,    15,    42,    69,    96,   123,   150,   152,   179,   206,   233,   260,   287,   314,   341,   368,   395,   422,   449,   451,   478,   505,   532,   559,   586},
            { 14,    41,    68,    95,   122,   149,   151,   178,   205,   232,   259,   286,   313,   340,   367,   394,   421,   448,   475,   477,   504,   531,   558,   585,   612},
            { 40,    67,    94,   121,   148,   175,   177,   204,   231,   258,   285,   312,   339,   366,   393,   420,   447,   474,   476,   503,   530,   557,   584,   611,    13},
            { 66,    93,   120,   147,   174,   176,   203,   230,   257,   284,   311,   338,   365,   392,   419,   446,   473,   500,   502,   529,   556,   583,   610,    12,    39},
            { 92,   119,   146,   173,   200,   202,   229,   256,   283,   310,   337,   364,   391,   418,   445,   472,   499,   501,   528,   555,   582,   609,    11,    38,    65},
            {118,   145,   172,   199,   201,   228,   255,   282,   309,   336,   363,   390,   417,   444,   471,   498,   525,   527,   554,   581,   608,    10,    37,    64,    91},
            {144,   171,   198,   225,   227,   254,   281,   308,   335,   362,   389,   416,   443,   470,   497,   524,   526,   553,   580,   607,     9,    36,    63,    90,   117},
            {170,   197,   224,   226,   253,   280,   307,   334,   361,   388,   415,   442,   469,   496,   523,   550,   552,   579,   606,     8,    35,    62,    89,   116,   143},
            {196,   223,   250,   252,   279,   306,   333,   360,   387,   414,   441,   468,   495,   522,   549,   551,   578,   605,     7,    34,    61,    88,   115,   142,   169},
            {222,   249,   251,   278,   305,   332,   359,   386,   413,   440,   467,   494,   521,   548,   575,   577,   604,     6,    33,    60,    87,   114,   141,   168,   195},
            {248,   275,   277,   304,   331,   358,   385,   412,   439,   466,   493,   520,   547,   574,   576,   603,     5,    32,    59,    86,   113,   140,   167,   194,   221},
            {274,   276,   303,   330,   357,   384,   411,   438,   465,   492,   519,   546,   573,   600,   602,     4,    31,    58,    85,   112,   139,   166,   193,   220,   247},
            {300,   302,   329,   356,   383,   410,   437,   464,   491,   518,   545,   572,   599,   601,     3,    30,    57,    84,   111,   138,   165,   192,   219,   246,   273},
            {301,   328,   355,   382,   409,   436,   463,   490,   517,   544,   571,   598,   625,     2,    29,    56,    83,   110,   137,   164,   191,   218,   245,   272,   299},
        };
    } // namespace magic
} // namespace nmtools::testing::data::common_matrix

#endif // NMTOOLS_TESTING_DATA_COMMON_HPP