#ifndef NMTOOLS_TESTING_DATA_MMADD_HPP
#define NMTOOLS_TESTING_DATA_MMADD_HPP

/* TODO: use __has_include */
#include "nmtools/array/fixed.hpp"
#include "nmtools/blas/blas.hpp"
#include "testing/testing.hpp"
#include <array>
/* TODO: use __has_include */
#include <vector>
#include <valarray>

/* @todo: make simple script to autogenereate test data */

NMTOOLS_TESTING_DECLARE_CASE(blas,mmadd)
{
    namespace magic = common_matrix::magic;

    NMTOOLS_TESTING_DECLARE_ARGS(case1) {
        using magic::m5x5;
        NMTOOLS_TESTING_DATA_DECLARE_ARRAY(x,m5x5);
        NMTOOLS_TESTING_DATA_DECLARE_ARRAY(y,m5x5);
        NMTOOLS_TESTING_DATA_DECLARE_MAT(x,5,5);
        NMTOOLS_TESTING_DATA_DECLARE_MAT(y,5,5);
    }
    NMTOOLS_TESTING_DECLARE_EXPECT(case1) {
        /**
         * @brief add two magic square 5x5 matrix: `octave:> magic(5)+magic(5)`
         * 
         */
        inline constexpr auto sum = std::array<std::array<double,5>,5>{{
            {34,   48,    2,   16,   30},
            {46,   10,   14,   28,   32},
            { 8,   12,   26,   40,   44},
            {20,   24,   38,   42,    6},
            {22,   36,   50,    4,   18},
        }};
    }

    NMTOOLS_TESTING_DECLARE_ARGS(case2) {
        using magic::m10x10;
        NMTOOLS_TESTING_DATA_DECLARE_ARRAY(x,m10x10);
        NMTOOLS_TESTING_DATA_DECLARE_ARRAY(y,m10x10);
        NMTOOLS_TESTING_DATA_DECLARE_MAT(x,10,10);
        NMTOOLS_TESTING_DATA_DECLARE_MAT(y,10,10);
    }
    NMTOOLS_TESTING_DECLARE_EXPECT(case2) {
        /**
         * @brief add two magic square 10x10 matrix: `octave:> magic(10)+magic(10)`
         * 
         */
        inline constexpr auto sum = std::array<std::array<double,10>,10>{{
            {184,   198,     2,    16,    30,   134,   148,   102,   116,    80},
            {196,   160,    14,    28,    32,   146,   110,   114,   128,    82},
            {  8,   162,   176,    40,    44,   108,   112,   126,   140,    94},
            {170,   174,    38,    42,     6,   120,   124,   138,   142,    56},
            {172,   186,    50,     4,    18,   122,   136,   150,   104,    68},
            { 34,    48,   152,   166,   180,    84,    98,    52,    66,   130},
            { 46,    10,   164,   178,   182,    96,    60,    64,    78,   132},
            {158,    12,    26,   190,   194,    58,    62,    76,    90,   144},
            { 20,    24,   188,   192,   156,    70,    74,    88,    92,   106},
            { 22,    36,   200,   154,   168,    72,    86,   100,    54,   118},
        }};
    }

    NMTOOLS_TESTING_DECLARE_ARGS(case3) {
        using magic::m15x15;
        NMTOOLS_TESTING_DATA_DECLARE_ARRAY(x,m15x15);
        NMTOOLS_TESTING_DATA_DECLARE_ARRAY(y,m15x15);
        NMTOOLS_TESTING_DATA_DECLARE_MAT(x,15,15);
        NMTOOLS_TESTING_DATA_DECLARE_MAT(y,15,15);
    }
    NMTOOLS_TESTING_DECLARE_EXPECT(case3) {
        /**
         * @brief add two magic square 15x15 matrix: `octave:> magic(15)+magic(15)`
         * 
         */
        inline constexpr auto sum = std::array<std::array<double,15>,15>{{
            {244,   278,   312,   346,   380,   414,   448,     2,    36,    70,   104,   138,   172,   206,   240},
            {276,   310,   344,   378,   412,   446,    30,    34,    68,   102,   136,   170,   204,   238,   242},
            {308,   342,   376,   410,   444,    28,    32,    66,   100,   134,   168,   202,   236,   270,   274},
            {340,   374,   408,   442,    26,    60,    64,    98,   132,   166,   200,   234,   268,   272,   306},
            {372,   406,   440,    24,    58,    62,    96,   130,   164,   198,   232,   266,   300,   304,   338},
            {404,   438,    22,    56,    90,    94,   128,   162,   196,   230,   264,   298,   302,   336,   370},
            {436,    20,    54,    88,    92,   126,   160,   194,   228,   262,   296,   330,   334,   368,   402},
            { 18,    52,    86,   120,   124,   158,   192,   226,   260,   294,   328,   332,   366,   400,   434},
            { 50,    84,   118,   122,   156,   190,   224,   258,   292,   326,   360,   364,   398,   432,    16},
            { 82,   116,   150,   154,   188,   222,   256,   290,   324,   358,   362,   396,   430,    14,    48},
            {114,   148,   152,   186,   220,   254,   288,   322,   356,   390,   394,   428,    12,    46,    80},
            {146,   180,   184,   218,   252,   286,   320,   354,   388,   392,   426,    10,    44,    78,   112},
            {178,   182,   216,   250,   284,   318,   352,   386,   420,   424,     8,    42,    76,   110,   144},
            {210,   214,   248,   282,   316,   350,   384,   418,   422,     6,    40,    74,   108,   142,   176},
            {212,   246,   280,   314,   348,   382,   416,   450,     4,    38,    72,   106,   140,   174,   208},
        }};
    }

    NMTOOLS_TESTING_DECLARE_ARGS(case4) {
        using magic::m20x20;
        NMTOOLS_TESTING_DATA_DECLARE_ARRAY(x,m20x20);
        NMTOOLS_TESTING_DATA_DECLARE_ARRAY(y,m20x20);
        NMTOOLS_TESTING_DATA_DECLARE_MAT(x,20,20);
        NMTOOLS_TESTING_DATA_DECLARE_MAT(y,20,20);
    }
    namespace case4::expect {
        /**
         * @brief add two magic square 20x20 matrix: `octave:> magic(20)+magic(20)`
         * 
         */
        inline constexpr auto sum = std::array<std::array<double,20>,20>{{
            {800,     4,     6,   794,   792,    12,    14,   786,   784,    20,    22,   778,   776,    28,    30,   770,   768,    36,    38,   762},
            { 42,   758,   756,    48,    50,   750,   748,    56,    58,   742,   740,    64,    66,   734,   732,    72,    74,   726,   724,    80},
            { 82,   718,   716,    88,    90,   710,   708,    96,    98,   702,   700,   104,   106,   694,   692,   112,   114,   686,   684,   120},
            {680,   124,   126,   674,   672,   132,   134,   666,   664,   140,   142,   658,   656,   148,   150,   650,   648,   156,   158,   642},
            {640,   164,   166,   634,   632,   172,   174,   626,   624,   180,   182,   618,   616,   188,   190,   610,   608,   196,   198,   602},
            {202,   598,   596,   208,   210,   590,   588,   216,   218,   582,   580,   224,   226,   574,   572,   232,   234,   566,   564,   240},
            {242,   558,   556,   248,   250,   550,   548,   256,   258,   542,   540,   264,   266,   534,   532,   272,   274,   526,   524,   280},
            {520,   284,   286,   514,   512,   292,   294,   506,   504,   300,   302,   498,   496,   308,   310,   490,   488,   316,   318,   482},
            {480,   324,   326,   474,   472,   332,   334,   466,   464,   340,   342,   458,   456,   348,   350,   450,   448,   356,   358,   442},
            {362,   438,   436,   368,   370,   430,   428,   376,   378,   422,   420,   384,   386,   414,   412,   392,   394,   406,   404,   400},
            {402,   398,   396,   408,   410,   390,   388,   416,   418,   382,   380,   424,   426,   374,   372,   432,   434,   366,   364,   440},
            {360,   444,   446,   354,   352,   452,   454,   346,   344,   460,   462,   338,   336,   468,   470,   330,   328,   476,   478,   322},
            {320,   484,   486,   314,   312,   492,   494,   306,   304,   500,   502,   298,   296,   508,   510,   290,   288,   516,   518,   282},
            {522,   278,   276,   528,   530,   270,   268,   536,   538,   262,   260,   544,   546,   254,   252,   552,   554,   246,   244,   560},
            {562,   238,   236,   568,   570,   230,   228,   576,   578,   222,   220,   584,   586,   214,   212,   592,   594,   206,   204,   600},
            {200,   604,   606,   194,   192,   612,   614,   186,   184,   620,   622,   178,   176,   628,   630,   170,   168,   636,   638,   162},
            {160,   644,   646,   154,   152,   652,   654,   146,   144,   660,   662,   138,   136,   668,   670,   130,   128,   676,   678,   122},
            {682,   118,   116,   688,   690,   110,   108,   696,   698,   102,   100,   704,   706,    94,    92,   712,   714,    86,    84,   720},
            {722,    78,    76,   728,   730,    70,    68,   736,   738,    62,    60,   744,   746,    54,    52,   752,   754,    46,    44,   760},
            { 40,   764,   766,    34,    32,   772,   774,    26,    24,   780,   782,    18,    16,   788,   790,    10,     8,   796,   798,     2},
        }};
    }

    NMTOOLS_TESTING_DECLARE_ARGS(case5) {
        using magic::m25x25;
        NMTOOLS_TESTING_DATA_DECLARE_ARRAY(x,m25x25);
        NMTOOLS_TESTING_DATA_DECLARE_ARRAY(y,m25x25);
        NMTOOLS_TESTING_DATA_DECLARE_MAT(x,25,25);
        NMTOOLS_TESTING_DATA_DECLARE_MAT(y,25,25);
    }
    NMTOOLS_TESTING_DECLARE_EXPECT(case5) {
        /**
         * @brief add two magic square 25x25 matrix: `octave:> magic(25)+magic(25)`
         * 
         */
        inline constexpr auto sum = std::array<std::array<double,25>,25>{{
            { 654,    708,    762,    816,    870,    924,    978,   1032,   1086,   1140,   1194,   1248,      2,     56,    110,    164,    218,    272,    326,    380,    434,    488,    542,    596,    650},
            { 706,    760,    814,    868,    922,    976,   1030,   1084,   1138,   1192,   1246,     50,     54,    108,    162,    216,    270,    324,    378,    432,    486,    540,    594,    648,    652},
            { 758,    812,    866,    920,    974,   1028,   1082,   1136,   1190,   1244,     48,     52,    106,    160,    214,    268,    322,    376,    430,    484,    538,    592,    646,    700,    704},
            { 810,    864,    918,    972,   1026,   1080,   1134,   1188,   1242,     46,    100,    104,    158,    212,    266,    320,    374,    428,    482,    536,    590,    644,    698,    702,    756},
            { 862,    916,    970,   1024,   1078,   1132,   1186,   1240,     44,     98,    102,    156,    210,    264,    318,    372,    426,    480,    534,    588,    642,    696,    750,    754,    808},
            { 914,    968,   1022,   1076,   1130,   1184,   1238,     42,     96,    150,    154,    208,    262,    316,    370,    424,    478,    532,    586,    640,    694,    748,    752,    806,    860},
            { 966,   1020,   1074,   1128,   1182,   1236,     40,     94,    148,    152,    206,    260,    314,    368,    422,    476,    530,    584,    638,    692,    746,    800,    804,    858,    912},
            {1018,   1072,   1126,   1180,   1234,     38,     92,    146,    200,    204,    258,    312,    366,    420,    474,    528,    582,    636,    690,    744,    798,    802,    856,    910,    964},
            {1070,   1124,   1178,   1232,     36,     90,    144,    198,    202,    256,    310,    364,    418,    472,    526,    580,    634,    688,    742,    796,    850,    854,    908,    962,   1016},
            {1122,   1176,   1230,     34,     88,    142,    196,    250,    254,    308,    362,    416,    470,    524,    578,    632,    686,    740,    794,    848,    852,    906,    960,   1014,   1068},
            {1174,   1228,     32,     86,    140,    194,    248,    252,    306,    360,    414,    468,    522,    576,    630,    684,    738,    792,    846,    900,    904,    958,   1012,   1066,   1120},
            {1226,     30,     84,    138,    192,    246,    300,    304,    358,    412,    466,    520,    574,    628,    682,    736,    790,    844,    898,    902,    956,   1010,   1064,   1118,   1172},
            {  28,     82,    136,    190,    244,    298,    302,    356,    410,    464,    518,    572,    626,    680,    734,    788,    842,    896,    950,    954,   1008,   1062,   1116,   1170,   1224},
            {  80,    134,    188,    242,    296,    350,    354,    408,    462,    516,    570,    624,    678,    732,    786,    840,    894,    948,    952,   1006,   1060,   1114,   1168,   1222,     26},
            { 132,    186,    240,    294,    348,    352,    406,    460,    514,    568,    622,    676,    730,    784,    838,    892,    946,   1000,   1004,   1058,   1112,   1166,   1220,     24,     78},
            { 184,    238,    292,    346,    400,    404,    458,    512,    566,    620,    674,    728,    782,    836,    890,    944,    998,   1002,   1056,   1110,   1164,   1218,     22,     76,    130},
            { 236,    290,    344,    398,    402,    456,    510,    564,    618,    672,    726,    780,    834,    888,    942,    996,   1050,   1054,   1108,   1162,   1216,     20,     74,    128,    182},
            { 288,    342,    396,    450,    454,    508,    562,    616,    670,    724,    778,    832,    886,    940,    994,   1048,   1052,   1106,   1160,   1214,     18,     72,    126,    180,    234},
            { 340,    394,    448,    452,    506,    560,    614,    668,    722,    776,    830,    884,    938,    992,   1046,   1100,   1104,   1158,   1212,     16,     70,    124,    178,    232,    286},
            { 392,    446,    500,    504,    558,    612,    666,    720,    774,    828,    882,    936,    990,   1044,   1098,   1102,   1156,   1210,     14,     68,    122,    176,    230,    284,    338},
            { 444,    498,    502,    556,    610,    664,    718,    772,    826,    880,    934,    988,   1042,   1096,   1150,   1154,   1208,     12,     66,    120,    174,    228,    282,    336,    390},
            { 496,    550,    554,    608,    662,    716,    770,    824,    878,    932,    986,   1040,   1094,   1148,   1152,   1206,     10,     64,    118,    172,    226,    280,    334,    388,    442},
            { 548,    552,    606,    660,    714,    768,    822,    876,    930,    984,   1038,   1092,   1146,   1200,   1204,      8,     62,    116,    170,    224,    278,    332,    386,    440,    494},
            { 600,    604,    658,    712,    766,    820,    874,    928,    982,   1036,   1090,   1144,   1198,   1202,      6,     60,    114,    168,    222,    276,    330,    384,    438,    492,    546},
            { 602,    656,    710,    764,    818,    872,    926,    980,   1034,   1088,   1142,   1196,   1250,      4,     58,    112,    166,    220,    274,    328,    382,    436,    490,    544,    598},
        }};
    }
}

#endif // NMTOOLS_TESTING_DATA_MMADD_HPP