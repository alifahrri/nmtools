#ifndef NMTOOLS_TESTING_DATA_BLAS_MSMUL_HPP
#define NMTOOLS_TESTING_DATA_BLAS_MSMUL_HPP

/* TODO: use __has_include */
#include "nmtools/array/fixed.hpp"
#include "nmtools/blas/blas.hpp"
#include "testing/testing.hpp"
#include <array>
/* TODO: use __has_include */
#include <vector>
#include <valarray>

/* @todo: make simple script to autogenereate test data */

NMTOOLS_TESTING_DECLARE_CASE(blas, msmul)
{
    template <typename T>
    constexpr T h = static_cast<T>(0.5);

    NMTOOLS_TESTING_DECLARE_ARGS(case1)
    {
        using common_matrix::magic::m5x5;
        using msmul::h;
        NMTOOLS_TESTING_DATA_DECLARE_ARRAY(x,m5x5);
        NMTOOLS_TESTING_DATA_DECLARE_MAT(x,5,5);
        // NOTE: DECLARE_SCALAR use cast which can handle scalar type
        NMTOOLS_TESTING_DATA_DECLARE_SCALAR(y,h);
    }
    NMTOOLS_TESTING_DECLARE_EXPECT(case1)
    {
        constexpr auto res = std::array<std::array<double,5>,5>{{
            { 8.50000,   12.00000,    0.50000,    4.00000,    7.50000},
            {11.50000,    2.50000,    3.50000,    7.00000,    8.00000},
            { 2.00000,    3.00000,    6.50000,   10.00000,   11.00000},
            { 5.00000,    6.00000,    9.50000,   10.50000,    1.50000},
            { 5.50000,    9.00000,   12.50000,    1.00000,    4.50000},
        }};
    }

    NMTOOLS_TESTING_DECLARE_ARGS(case2)
    {
        using common_matrix::magic::m10x10;
        using msmul::h;
        NMTOOLS_TESTING_DATA_DECLARE_ARRAY(x,m10x10);
        NMTOOLS_TESTING_DATA_DECLARE_MAT(x,10,10);
        // NOTE: DECLARE_SCALAR use cast which can handle scalar type
        NMTOOLS_TESTING_DATA_DECLARE_SCALAR(y,h);
    }
    NMTOOLS_TESTING_DECLARE_EXPECT(case2)
    {
        constexpr auto res = std::array<std::array<double,10>,10>{{
            {46.00000,   49.50000,    0.50000,    4.00000,    7.50000,   33.50000,   37.00000,   25.50000,   29.00000,   20.00000},
            {49.00000,   40.00000,    3.50000,    7.00000,    8.00000,   36.50000,   27.50000,   28.50000,   32.00000,   20.50000},
            { 2.00000,   40.50000,   44.00000,   10.00000,   11.00000,   27.00000,   28.00000,   31.50000,   35.00000,   23.50000},
            {42.50000,   43.50000,    9.50000,   10.50000,    1.50000,   30.00000,   31.00000,   34.50000,   35.50000,   14.00000},
            {43.00000,   46.50000,   12.50000,    1.00000,    4.50000,   30.50000,   34.00000,   37.50000,   26.00000,   17.00000},
            { 8.50000,   12.00000,   38.00000,   41.50000,   45.00000,   21.00000,   24.50000,   13.00000,   16.50000,   32.50000},
            {11.50000,    2.50000,   41.00000,   44.50000,   45.50000,   24.00000,   15.00000,   16.00000,   19.50000,   33.00000},
            {39.50000,    3.00000,    6.50000,   47.50000,   48.50000,   14.50000,   15.50000,   19.00000,   22.50000,   36.00000},
            { 5.00000,    6.00000,   47.00000,   48.00000,   39.00000,   17.50000,   18.50000,   22.00000,   23.00000,   26.50000},
            { 5.50000,    9.00000,   50.00000,   38.50000,   42.00000,   18.00000,   21.50000,   25.00000,   13.50000,   29.50000},
        }};
    }

    NMTOOLS_TESTING_DECLARE_ARGS(case3)
    {
        using common_matrix::magic::m15x15;
        using msmul::h;
        NMTOOLS_TESTING_DATA_DECLARE_ARRAY(x,m15x15);
        NMTOOLS_TESTING_DATA_DECLARE_MAT(x,15,15);
        // NOTE: DECLARE_SCALAR use cast which can handle scalar type
        NMTOOLS_TESTING_DATA_DECLARE_SCALAR(y,h);
    }
    NMTOOLS_TESTING_DECLARE_EXPECT(case3)
    {
        constexpr auto res = std::array<std::array<double,15>,15>{{
            { 61.00000,    69.50000,    78.00000,    86.50000,    95.00000,   103.50000,   112.00000,     0.50000,     9.00000,    17.50000,    26.00000,    34.50000,    43.00000,    51.50000,    60.00000},
            { 69.00000,    77.50000,    86.00000,    94.50000,   103.00000,   111.50000,     7.50000,     8.50000,    17.00000,    25.50000,    34.00000,    42.50000,    51.00000,    59.50000,    60.50000},
            { 77.00000,    85.50000,    94.00000,   102.50000,   111.00000,     7.00000,     8.00000,    16.50000,    25.00000,    33.50000,    42.00000,    50.50000,    59.00000,    67.50000,    68.50000},
            { 85.00000,    93.50000,   102.00000,   110.50000,     6.50000,    15.00000,    16.00000,    24.50000,    33.00000,    41.50000,    50.00000,    58.50000,    67.00000,    68.00000,    76.50000},
            { 93.00000,   101.50000,   110.00000,     6.00000,    14.50000,    15.50000,    24.00000,    32.50000,    41.00000,    49.50000,    58.00000,    66.50000,    75.00000,    76.00000,    84.50000},
            {101.00000,   109.50000,     5.50000,    14.00000,    22.50000,    23.50000,    32.00000,    40.50000,    49.00000,    57.50000,    66.00000,    74.50000,    75.50000,    84.00000,    92.50000},
            {109.00000,     5.00000,    13.50000,    22.00000,    23.00000,    31.50000,    40.00000,    48.50000,    57.00000,    65.50000,    74.00000,    82.50000,    83.50000,    92.00000,   100.50000},
            {  4.50000,    13.00000,    21.50000,    30.00000,    31.00000,    39.50000,    48.00000,    56.50000,    65.00000,    73.50000,    82.00000,    83.00000,    91.50000,   100.00000,   108.50000},
            { 12.50000,    21.00000,    29.50000,    30.50000,    39.00000,    47.50000,    56.00000,    64.50000,    73.00000,    81.50000,    90.00000,    91.00000,    99.50000,   108.00000,     4.00000},
            { 20.50000,    29.00000,    37.50000,    38.50000,    47.00000,    55.50000,    64.00000,    72.50000,    81.00000,    89.50000,    90.50000,    99.00000,   107.50000,     3.50000,    12.00000},
            { 28.50000,    37.00000,    38.00000,    46.50000,    55.00000,    63.50000,    72.00000,    80.50000,    89.00000,    97.50000,    98.50000,   107.00000,     3.00000,    11.50000,    20.00000},
            { 36.50000,    45.00000,    46.00000,    54.50000,    63.00000,    71.50000,    80.00000,    88.50000,    97.00000,    98.00000,   106.50000,     2.50000,    11.00000,    19.50000,    28.00000},
            { 44.50000,    45.50000,    54.00000,    62.50000,    71.00000,    79.50000,    88.00000,    96.50000,   105.00000,   106.00000,     2.00000,    10.50000,    19.00000,    27.50000,    36.00000},
            { 52.50000,    53.50000,    62.00000,    70.50000,    79.00000,    87.50000,    96.00000,   104.50000,   105.50000,     1.50000,    10.00000,    18.50000,    27.00000,    35.50000,    44.00000},
            { 53.00000,    61.50000,    70.00000,    78.50000,    87.00000,    95.50000,   104.00000,   112.50000,     1.00000,     9.50000,    18.00000,    26.50000,    35.00000,    43.50000,    52.00000},
        }};
    }

    NMTOOLS_TESTING_DECLARE_ARGS(case4)
    {
        using common_matrix::magic::m20x20;
        using msmul::h;
        NMTOOLS_TESTING_DATA_DECLARE_ARRAY(x,m20x20);
        NMTOOLS_TESTING_DATA_DECLARE_MAT(x,20,20);
        // NOTE: DECLARE_SCALAR use cast which can handle scalar type
        NMTOOLS_TESTING_DATA_DECLARE_SCALAR(y,h);
    }
    NMTOOLS_TESTING_DECLARE_EXPECT(case4)
    {
        constexpr auto res = std::array<std::array<double,20>,20>{{
            {200.00000,     1.00000,     1.50000,   198.50000,   198.00000,     3.00000,     3.50000,   196.50000,   196.00000,     5.00000,     5.50000,   194.50000,   194.00000,     7.00000,     7.50000,   192.50000,   192.00000,     9.00000,     9.50000,   190.50000},
            { 10.50000,   189.50000,   189.00000,    12.00000,    12.50000,   187.50000,   187.00000,    14.00000,    14.50000,   185.50000,   185.00000,    16.00000,    16.50000,   183.50000,   183.00000,    18.00000,    18.50000,   181.50000,   181.00000,    20.00000},
            { 20.50000,   179.50000,   179.00000,    22.00000,    22.50000,   177.50000,   177.00000,    24.00000,    24.50000,   175.50000,   175.00000,    26.00000,    26.50000,   173.50000,   173.00000,    28.00000,    28.50000,   171.50000,   171.00000,    30.00000},
            {170.00000,    31.00000,    31.50000,   168.50000,   168.00000,    33.00000,    33.50000,   166.50000,   166.00000,    35.00000,    35.50000,   164.50000,   164.00000,    37.00000,    37.50000,   162.50000,   162.00000,    39.00000,    39.50000,   160.50000},
            {160.00000,    41.00000,    41.50000,   158.50000,   158.00000,    43.00000,    43.50000,   156.50000,   156.00000,    45.00000,    45.50000,   154.50000,   154.00000,    47.00000,    47.50000,   152.50000,   152.00000,    49.00000,    49.50000,   150.50000},
            { 50.50000,   149.50000,   149.00000,    52.00000,    52.50000,   147.50000,   147.00000,    54.00000,    54.50000,   145.50000,   145.00000,    56.00000,    56.50000,   143.50000,   143.00000,    58.00000,    58.50000,   141.50000,   141.00000,    60.00000},
            { 60.50000,   139.50000,   139.00000,    62.00000,    62.50000,   137.50000,   137.00000,    64.00000,    64.50000,   135.50000,   135.00000,    66.00000,    66.50000,   133.50000,   133.00000,    68.00000,    68.50000,   131.50000,   131.00000,    70.00000},
            {130.00000,    71.00000,    71.50000,   128.50000,   128.00000,    73.00000,    73.50000,   126.50000,   126.00000,    75.00000,    75.50000,   124.50000,   124.00000,    77.00000,    77.50000,   122.50000,   122.00000,    79.00000,    79.50000,   120.50000},
            {120.00000,    81.00000,    81.50000,   118.50000,   118.00000,    83.00000,    83.50000,   116.50000,   116.00000,    85.00000,    85.50000,   114.50000,   114.00000,    87.00000,    87.50000,   112.50000,   112.00000,    89.00000,    89.50000,   110.50000},
            { 90.50000,   109.50000,   109.00000,    92.00000,    92.50000,   107.50000,   107.00000,    94.00000,    94.50000,   105.50000,   105.00000,    96.00000,    96.50000,   103.50000,   103.00000,    98.00000,    98.50000,   101.50000,   101.00000,   100.00000},
            {100.50000,    99.50000,    99.00000,   102.00000,   102.50000,    97.50000,    97.00000,   104.00000,   104.50000,    95.50000,    95.00000,   106.00000,   106.50000,    93.50000,    93.00000,   108.00000,   108.50000,    91.50000,    91.00000,   110.00000},
            { 90.00000,   111.00000,   111.50000,    88.50000,    88.00000,   113.00000,   113.50000,    86.50000,    86.00000,   115.00000,   115.50000,    84.50000,    84.00000,   117.00000,   117.50000,    82.50000,    82.00000,   119.00000,   119.50000,    80.50000},
            { 80.00000,   121.00000,   121.50000,    78.50000,    78.00000,   123.00000,   123.50000,    76.50000,    76.00000,   125.00000,   125.50000,    74.50000,    74.00000,   127.00000,   127.50000,    72.50000,    72.00000,   129.00000,   129.50000,    70.50000},
            {130.50000,    69.50000,    69.00000,   132.00000,   132.50000,    67.50000,    67.00000,   134.00000,   134.50000,    65.50000,    65.00000,   136.00000,   136.50000,    63.50000,    63.00000,   138.00000,   138.50000,    61.50000,    61.00000,   140.00000},
            {140.50000,    59.50000,    59.00000,   142.00000,   142.50000,    57.50000,    57.00000,   144.00000,   144.50000,    55.50000,    55.00000,   146.00000,   146.50000,    53.50000,    53.00000,   148.00000,   148.50000,    51.50000,    51.00000,   150.00000},
            { 50.00000,   151.00000,   151.50000,    48.50000,    48.00000,   153.00000,   153.50000,    46.50000,    46.00000,   155.00000,   155.50000,    44.50000,    44.00000,   157.00000,   157.50000,    42.50000,    42.00000,   159.00000,   159.50000,    40.50000},
            { 40.00000,   161.00000,   161.50000,    38.50000,    38.00000,   163.00000,   163.50000,    36.50000,    36.00000,   165.00000,   165.50000,    34.50000,    34.00000,   167.00000,   167.50000,    32.50000,    32.00000,   169.00000,   169.50000,    30.50000},
            {170.50000,    29.50000,    29.00000,   172.00000,   172.50000,    27.50000,    27.00000,   174.00000,   174.50000,    25.50000,    25.00000,   176.00000,   176.50000,    23.50000,    23.00000,   178.00000,   178.50000,    21.50000,    21.00000,   180.00000},
            {180.50000,    19.50000,    19.00000,   182.00000,   182.50000,    17.50000,    17.00000,   184.00000,   184.50000,    15.50000,    15.00000,   186.00000,   186.50000,    13.50000,    13.00000,   188.00000,   188.50000,    11.50000,    11.00000,   190.00000},
            { 10.00000,   191.00000,   191.50000,     8.50000,     8.00000,   193.00000,   193.50000,     6.50000,     6.00000,   195.00000,   195.50000,     4.50000,     4.00000,   197.00000,   197.50000,     2.50000,     2.00000,   199.00000,   199.50000,     0.50000},
        }};
    }

    NMTOOLS_TESTING_DECLARE_ARGS(case5)
    {
        using common_matrix::magic::m25x25;
        using msmul::h;
        NMTOOLS_TESTING_DATA_DECLARE_ARRAY(x,m25x25);
        NMTOOLS_TESTING_DATA_DECLARE_MAT(x,25,25);
        // NOTE: DECLARE_SCALAR use cast which can handle scalar type
        NMTOOLS_TESTING_DATA_DECLARE_SCALAR(y,h);
    }
    NMTOOLS_TESTING_DECLARE_EXPECT(case5)
    {
        constexpr auto res = std::array<std::array<double,25>,25>{{
            {163.50,   177.00,   190.50,   204.00,   217.50,   231.00,   244.50,   258.00,   271.50,   285.00,   298.50,   312.00,     0.50,    14.00,    27.50,    41.00,    54.50,    68.00,    81.50,    95.00,   108.50,   122.00,   135.50,   149.00,   162.50},
            {176.50,   190.00,   203.50,   217.00,   230.50,   244.00,   257.50,   271.00,   284.50,   298.00,   311.50,    12.50,    13.50,    27.00,    40.50,    54.00,    67.50,    81.00,    94.50,   108.00,   121.50,   135.00,   148.50,   162.00,   163.00},
            {189.50,   203.00,   216.50,   230.00,   243.50,   257.00,   270.50,   284.00,   297.50,   311.00,    12.00,    13.00,    26.50,    40.00,    53.50,    67.00,    80.50,    94.00,   107.50,   121.00,   134.50,   148.00,   161.50,   175.00,   176.00},
            {202.50,   216.00,   229.50,   243.00,   256.50,   270.00,   283.50,   297.00,   310.50,    11.50,    25.00,    26.00,    39.50,    53.00,    66.50,    80.00,    93.50,   107.00,   120.50,   134.00,   147.50,   161.00,   174.50,   175.50,   189.00},
            {215.50,   229.00,   242.50,   256.00,   269.50,   283.00,   296.50,   310.00,    11.00,    24.50,    25.50,    39.00,    52.50,    66.00,    79.50,    93.00,   106.50,   120.00,   133.50,   147.00,   160.50,   174.00,   187.50,   188.50,   202.00},
            {228.50,   242.00,   255.50,   269.00,   282.50,   296.00,   309.50,    10.50,    24.00,    37.50,    38.50,    52.00,    65.50,    79.00,    92.50,   106.00,   119.50,   133.00,   146.50,   160.00,   173.50,   187.00,   188.00,   201.50,   215.00},
            {241.50,   255.00,   268.50,   282.00,   295.50,   309.00,    10.00,    23.50,    37.00,    38.00,    51.50,    65.00,    78.50,    92.00,   105.50,   119.00,   132.50,   146.00,   159.50,   173.00,   186.50,   200.00,   201.00,   214.50,   228.00},
            {254.50,   268.00,   281.50,   295.00,   308.50,     9.50,    23.00,    36.50,    50.00,    51.00,    64.50,    78.00,    91.50,   105.00,   118.50,   132.00,   145.50,   159.00,   172.50,   186.00,   199.50,   200.50,   214.00,   227.50,   241.00},
            {267.50,   281.00,   294.50,   308.00,     9.00,    22.50,    36.00,    49.50,    50.50,    64.00,    77.50,    91.00,   104.50,   118.00,   131.50,   145.00,   158.50,   172.00,   185.50,   199.00,   212.50,   213.50,   227.00,   240.50,   254.00},
            {280.50,   294.00,   307.50,     8.50,    22.00,    35.50,    49.00,    62.50,    63.50,    77.00,    90.50,   104.00,   117.50,   131.00,   144.50,   158.00,   171.50,   185.00,   198.50,   212.00,   213.00,   226.50,   240.00,   253.50,   267.00},
            {293.50,   307.00,     8.00,    21.50,    35.00,    48.50,    62.00,    63.00,    76.50,    90.00,   103.50,   117.00,   130.50,   144.00,   157.50,   171.00,   184.50,   198.00,   211.50,   225.00,   226.00,   239.50,   253.00,   266.50,   280.00},
            {306.50,     7.50,    21.00,    34.50,    48.00,    61.50,    75.00,    76.00,    89.50,   103.00,   116.50,   130.00,   143.50,   157.00,   170.50,   184.00,   197.50,   211.00,   224.50,   225.50,   239.00,   252.50,   266.00,   279.50,   293.00},
            {  7.00,    20.50,    34.00,    47.50,    61.00,    74.50,    75.50,    89.00,   102.50,   116.00,   129.50,   143.00,   156.50,   170.00,   183.50,   197.00,   210.50,   224.00,   237.50,   238.50,   252.00,   265.50,   279.00,   292.50,   306.00},
            { 20.00,    33.50,    47.00,    60.50,    74.00,    87.50,    88.50,   102.00,   115.50,   129.00,   142.50,   156.00,   169.50,   183.00,   196.50,   210.00,   223.50,   237.00,   238.00,   251.50,   265.00,   278.50,   292.00,   305.50,     6.50},
            { 33.00,    46.50,    60.00,    73.50,    87.00,    88.00,   101.50,   115.00,   128.50,   142.00,   155.50,   169.00,   182.50,   196.00,   209.50,   223.00,   236.50,   250.00,   251.00,   264.50,   278.00,   291.50,   305.00,     6.00,    19.50},
            { 46.00,    59.50,    73.00,    86.50,   100.00,   101.00,   114.50,   128.00,   141.50,   155.00,   168.50,   182.00,   195.50,   209.00,   222.50,   236.00,   249.50,   250.50,   264.00,   277.50,   291.00,   304.50,     5.50,    19.00,    32.50},
            { 59.00,    72.50,    86.00,    99.50,   100.50,   114.00,   127.50,   141.00,   154.50,   168.00,   181.50,   195.00,   208.50,   222.00,   235.50,   249.00,   262.50,   263.50,   277.00,   290.50,   304.00,     5.00,    18.50,    32.00,    45.50},
            { 72.00,    85.50,    99.00,   112.50,   113.50,   127.00,   140.50,   154.00,   167.50,   181.00,   194.50,   208.00,   221.50,   235.00,   248.50,   262.00,   263.00,   276.50,   290.00,   303.50,     4.50,    18.00,    31.50,    45.00,    58.50},
            { 85.00,    98.50,   112.00,   113.00,   126.50,   140.00,   153.50,   167.00,   180.50,   194.00,   207.50,   221.00,   234.50,   248.00,   261.50,   275.00,   276.00,   289.50,   303.00,     4.00,    17.50,    31.00,    44.50,    58.00,    71.50},
            { 98.00,   111.50,   125.00,   126.00,   139.50,   153.00,   166.50,   180.00,   193.50,   207.00,   220.50,   234.00,   247.50,   261.00,   274.50,   275.50,   289.00,   302.50,     3.50,    17.00,    30.50,    44.00,    57.50,    71.00,    84.50},
            {111.00,   124.50,   125.50,   139.00,   152.50,   166.00,   179.50,   193.00,   206.50,   220.00,   233.50,   247.00,   260.50,   274.00,   287.50,   288.50,   302.00,     3.00,    16.50,    30.00,    43.50,    57.00,    70.50,    84.00,    97.50},
            {124.00,   137.50,   138.50,   152.00,   165.50,   179.00,   192.50,   206.00,   219.50,   233.00,   246.50,   260.00,   273.50,   287.00,   288.00,   301.50,     2.50,    16.00,    29.50,    43.00,    56.50,    70.00,    83.50,    97.00,   110.50},
            {137.00,   138.00,   151.50,   165.00,   178.50,   192.00,   205.50,   219.00,   232.50,   246.00,   259.50,   273.00,   286.50,   300.00,   301.00,     2.00,    15.50,    29.00,    42.50,    56.00,    69.50,    83.00,    96.50,   110.00,   123.50},
            {150.00,   151.00,   164.50,   178.00,   191.50,   205.00,   218.50,   232.00,   245.50,   259.00,   272.50,   286.00,   299.50,   300.50,     1.50,    15.00,    28.50,    42.00,    55.50,    69.00,    82.50,    96.00,   109.50,   123.00,   136.50},
            {150.50,   164.00,   177.50,   191.00,   204.50,   218.00,   231.50,   245.00,   258.50,   272.00,   285.50,   299.00,   312.50,     1.00,    14.50,    28.00,    41.50,    55.00,    68.50,    82.00,    95.50,   109.00,   122.50,   136.00,   149.50}, 
        }};
    }
}

#endif // NMTOOLS_TESTING_DATA_BLAS_MSMUL_HPP