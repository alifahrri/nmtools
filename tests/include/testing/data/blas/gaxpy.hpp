#ifndef NMTOOLS_TESTING_DATA_BLAS_GAXPY_HPP
#define NMTOOLS_TESTING_DATA_BLAS_GAXPY_HPP

/* TODO: use __has_include */
#include "nmtools/array/fixed.hpp"
#include "nmtools/blas/blas.hpp"
#include "testing/testing.hpp"
#include <array>
/* TODO: use __has_include */
#include <vector>
#include <valarray>

/* @todo: make simple script to autogenereate test data */

/**
 * @brief define output precision for this case
 * 
 */
#define NMTOOLS_TESTING_DATA_BLAS_GAXPY_OUTPUT_PRECISION 1e-4

/**
 * @brief redefine default output precision that is used across testing
 * 
 */
#undef NMTOOLS_TESTING_OUTPUT_PRECISION
#define NMTOOLS_TESTING_OUTPUT_PRECISION NMTOOLS_TESTING_DATA_BLAS_GAXPY_OUTPUT_PRECISION

NMTOOLS_TESTING_DECLARE_CASE(blas, gaxpy)
{
    NMTOOLS_TESTING_DECLARE_ARGS(case1)
    {
        using common::v5;
        using common::r5;
        template <typename T>
        constexpr T a[5][5] = {
            {1.01000e-01,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03},
            {1.00000e-03,   1.01000e-01,   1.00000e-03,   1.00000e-03,   1.00000e-03},
            {1.00000e-03,   1.00000e-03,   1.01000e-01,   1.00000e-03,   1.00000e-03},
            {1.00000e-03,   1.00000e-03,   1.00000e-03,   1.01000e-01,   1.00000e-03},
            {1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.01000e-01},
        };
        NMTOOLS_TESTING_DATA_DECLARE_ARRAY(x,v5);
        NMTOOLS_TESTING_DATA_DECLARE_VEC(x,5);
        NMTOOLS_TESTING_DATA_DECLARE_ARRAY(y,r5);
        NMTOOLS_TESTING_DATA_DECLARE_VEC(y,5);
        NMTOOLS_TESTING_DATA_DECLARE_ARRAY(a,a);
        NMTOOLS_TESTING_DATA_DECLARE_MAT(a,5,5);
    }
    NMTOOLS_TESTING_DECLARE_EXPECT(case1)
    {
        /**
         * @brief octave:> `((ones(5) * 0.001 + eye(5) * 0.1 ) * magic(5)(1,:)' + [1 : 5]')'`
         * 
         */
        constexpr auto res = std::array<double,5>{2.76500,   4.46500,   3.16500,   4.86500,   6.56500};
    }

    NMTOOLS_TESTING_DECLARE_ARGS(case2)
    {
        using common::v10;
        using common::r10;
        template <typename T>
        constexpr T a[10][10] = {
            {1.01000e-01,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03},
            {1.00000e-03,   1.01000e-01,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03},
            {1.00000e-03,   1.00000e-03,   1.01000e-01,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03},
            {1.00000e-03,   1.00000e-03,   1.00000e-03,   1.01000e-01,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03},
            {1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.01000e-01,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03},
            {1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.01000e-01,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03},
            {1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.01000e-01,   1.00000e-03,   1.00000e-03,   1.00000e-03},
            {1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.01000e-01,   1.00000e-03,   1.00000e-03},
            {1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.01000e-01,   1.00000e-03},
            {1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.01000e-01},
        };
        NMTOOLS_TESTING_DATA_DECLARE_ARRAY(x,v10);
        NMTOOLS_TESTING_DATA_DECLARE_VEC(x,10);
        NMTOOLS_TESTING_DATA_DECLARE_ARRAY(y,r10);
        NMTOOLS_TESTING_DATA_DECLARE_VEC(y,10);
        NMTOOLS_TESTING_DATA_DECLARE_ARRAY(a,a);
        NMTOOLS_TESTING_DATA_DECLARE_MAT(a,10,10);
    }
    NMTOOLS_TESTING_DECLARE_EXPECT(case2)
    {
        /**
         * @brief octave:> `((ones(10) * 0.001 + eye(10) * 0.1 ) * magic(10)(1,:)' + [1 : 10]')'`
         * 
         */
        constexpr auto res = std::array<double,10>{10.70500,   12.40500,    3.60500,    5.30500,    7.00500,   13.20500,   14.90500,   13.60500,   15.30500,   14.50500};
    }

    NMTOOLS_TESTING_DECLARE_ARGS(case3)
    {
        using common::v15;
        using common::r15;
        template <typename T>
        constexpr T a[15][15] = {
            {1.01000e-01,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03},
            {1.00000e-03,   1.01000e-01,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03},
            {1.00000e-03,   1.00000e-03,   1.01000e-01,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03},
            {1.00000e-03,   1.00000e-03,   1.00000e-03,   1.01000e-01,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03},
            {1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.01000e-01,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03},
            {1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.01000e-01,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03},
            {1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.01000e-01,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03},
            {1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.01000e-01,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03},
            {1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.01000e-01,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03},
            {1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.01000e-01,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03},
            {1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.01000e-01,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03},
            {1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.01000e-01,   1.00000e-03,   1.00000e-03,   1.00000e-03},
            {1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.01000e-01,   1.00000e-03,   1.00000e-03},
            {1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.01000e-01,   1.00000e-03},
            {1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.00000e-03,   1.01000e-01},
        };
        NMTOOLS_TESTING_DATA_DECLARE_ARRAY(x,v15);
        NMTOOLS_TESTING_DATA_DECLARE_VEC(x,15);
        NMTOOLS_TESTING_DATA_DECLARE_ARRAY(y,r15);
        NMTOOLS_TESTING_DATA_DECLARE_VEC(y,15);
        NMTOOLS_TESTING_DATA_DECLARE_ARRAY(a,a);
        NMTOOLS_TESTING_DATA_DECLARE_MAT(a,15,15);
    }
    NMTOOLS_TESTING_DECLARE_EXPECT(case3)
    {
        /**
         * @brief octave:> `((ones(15) * 0.001 + eye(15) * 0.1 ) * magic(15)(1,:)' + [1 : 15]')'`
         * 
         */
        constexpr auto res = std::array<double,15>{14.89500,   17.59500,   20.29500,   22.99500,   25.69500,   28.39500,   31.09500,    9.79500,   12.49500,   15.19500,   17.89500,   20.59500,   23.29500,   25.99500,   28.69500};
    }

    NMTOOLS_TESTING_DECLARE_ARGS(case4)
    {
        using common::v20;
        using common::r20;
        template <typename T>
        constexpr T a[20][20] = {
            {0.1010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010},
            {0.0010,   0.1010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010},
            {0.0010,   0.0010,   0.1010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010},
            {0.0010,   0.0010,   0.0010,   0.1010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010},
            {0.0010,   0.0010,   0.0010,   0.0010,   0.1010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010},
            {0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.1010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010},
            {0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.1010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010},
            {0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.1010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010},
            {0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.1010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010},
            {0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.1010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010},
            {0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.1010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010},
            {0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.1010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010},
            {0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.1010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010},
            {0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.1010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010},
            {0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.1010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010},
            {0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.1010,   0.0010,   0.0010,   0.0010,   0.0010},
            {0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.1010,   0.0010,   0.0010,   0.0010},
            {0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.1010,   0.0010,   0.0010},
            {0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.1010,   0.0010},
            {0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.1010},
        };
        NMTOOLS_TESTING_DATA_DECLARE_ARRAY(x,v20);
        NMTOOLS_TESTING_DATA_DECLARE_VEC(x,20);
        NMTOOLS_TESTING_DATA_DECLARE_ARRAY(y,r20);
        NMTOOLS_TESTING_DATA_DECLARE_VEC(y,20);
        NMTOOLS_TESTING_DATA_DECLARE_ARRAY(a,a);
        NMTOOLS_TESTING_DATA_DECLARE_MAT(a,20,20);
    }
    NMTOOLS_TESTING_DECLARE_EXPECT(case4)
    {
        /**
         * @brief octave:> `((ones(20) * 0.001 + eye(20) * 0.1 ) * magic(20)(1,:)' + [1 : 20]')'`
         * 
         */
        constexpr auto res = std::array<double,20>{45.01000,    6.21000,    7.31000,   47.71000,   48.61000,   10.61000,   11.71000,   51.31000,   52.21000,   15.01000,   16.11000,   54.91000,   55.81000,   19.41000,   20.51000,   58.51000,   59.41000,   23.81000,   24.91000,   62.11000};
    }

    NMTOOLS_TESTING_DECLARE_ARGS(case5)
    {
        using common::v25;
        using common::r25;
        template <typename T>
        constexpr T a[25][25] = {
            {0.1010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010},
            {0.0010,   0.1010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010},
            {0.0010,   0.0010,   0.1010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010},
            {0.0010,   0.0010,   0.0010,   0.1010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010},
            {0.0010,   0.0010,   0.0010,   0.0010,   0.1010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010},
            {0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.1010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010},
            {0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.1010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010},
            {0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.1010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010},
            {0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.1010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010},
            {0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.1010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010},
            {0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.1010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010},
            {0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.1010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010},
            {0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.1010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010},
            {0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.1010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010},
            {0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.1010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010},
            {0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.1010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010},
            {0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.1010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010},
            {0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.1010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010},
            {0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.1010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010},
            {0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.1010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010},
            {0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.1010,   0.0010,   0.0010,   0.0010,   0.0010},
            {0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.1010,   0.0010,   0.0010,   0.0010},
            {0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.1010,   0.0010,   0.0010},
            {0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.1010,   0.0010},
            {0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.0010,   0.1010},
        };
        NMTOOLS_TESTING_DATA_DECLARE_ARRAY(x,v25);
        NMTOOLS_TESTING_DATA_DECLARE_VEC(x,25);
        NMTOOLS_TESTING_DATA_DECLARE_ARRAY(y,r25);
        NMTOOLS_TESTING_DATA_DECLARE_VEC(y,25);
        NMTOOLS_TESTING_DATA_DECLARE_ARRAY(a,a);
        NMTOOLS_TESTING_DATA_DECLARE_MAT(a,25,25);
    }
    NMTOOLS_TESTING_DECLARE_EXPECT(case5)
    {
        /**
         * @brief octave:> `((ones(25) * 0.001 + eye(25) * 0.1 ) * magic(25)(1,:)' + [1 : 25]')'`
         * 
         */
        constexpr auto res = std::array<double,25>{41.5250,   45.2250,   48.9250,   52.6250,   56.3250,   60.0250,   63.7250,   67.4250,   71.1250,   74.8250,   78.5250,   82.2250,   20.9250,   24.6250,   28.3250,   32.0250,   35.7250,   39.4250,   43.1250,   46.8250,   50.5250,   54.2250,   57.9250,   61.6250,   65.3250};
    }
}

#endif // NMTOOLS_TESTING_DATA_BLAS_GAXPY_HPP