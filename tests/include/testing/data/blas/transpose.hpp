#ifndef NMTOOLS_TESTING_DATA_BLAS_TRANSPOSE_HPP
#define NMTOOLS_TESTING_DATA_BLAS_TRANSPOSE_HPP

/* TODO: use __has_include */
#include "nmtools/array/fixed.hpp"
#include "nmtools/blas/blas.hpp"
#include "testing/testing.hpp"
#include <array>
/* TODO: use __has_include */
#include <vector>
#include <valarray>

/* @todo: make simple script to autogenereate test data */

NMTOOLS_TESTING_DECLARE_CASE(blas, transpose)
{
    NMTOOLS_TESTING_DECLARE_ARGS(case1) {
        using common_matrix::magic::m5x5;
        NMTOOLS_TESTING_DATA_DECLARE_ARRAY(x,m5x5);
        NMTOOLS_TESTING_DATA_DECLARE_MAT(x,5,5);
    }
    NMTOOLS_TESTING_DECLARE_EXPECT(case1) {
        constexpr auto res = std::array<std::array<double,5>,5>{{
            {17,   23,    4,   10,   11},
            {24,    5,    6,   12,   18},
            { 1,    7,   13,   19,   25},
            { 8,   14,   20,   21,    2},
            {15,   16,   22,    3,    9},
        }};
    }

    NMTOOLS_TESTING_DECLARE_ARGS(case2) {
        using common_matrix::magic::m10x10;
        NMTOOLS_TESTING_DATA_DECLARE_ARRAY(x,m10x10);
        NMTOOLS_TESTING_DATA_DECLARE_MAT(x,10,10);
    }
    NMTOOLS_TESTING_DECLARE_EXPECT(case2) {
        constexpr auto res = std::array<std::array<double,10>,10>{{
            {92,    98,     4,    85,    86,    17,    23,    79,    10,    11},
            {99,    80,    81,    87,    93,    24,     5,     6,    12,    18},
            { 1,     7,    88,    19,    25,    76,    82,    13,    94,   100},
            { 8,    14,    20,    21,     2,    83,    89,    95,    96,    77},
            {15,    16,    22,     3,     9,    90,    91,    97,    78,    84},
            {67,    73,    54,    60,    61,    42,    48,    29,    35,    36},
            {74,    55,    56,    62,    68,    49,    30,    31,    37,    43},
            {51,    57,    63,    69,    75,    26,    32,    38,    44,    50},
            {58,    64,    70,    71,    52,    33,    39,    45,    46,    27},
            {40,    41,    47,    28,    34,    65,    66,    72,    53,    59}, 
        }};
    }

    NMTOOLS_TESTING_DECLARE_ARGS(case3) {
        using common_matrix::magic::m15x15;
        NMTOOLS_TESTING_DATA_DECLARE_ARRAY(x,m15x15);
        NMTOOLS_TESTING_DATA_DECLARE_MAT(x,15,15);
    }
    NMTOOLS_TESTING_DECLARE_EXPECT(case3) {
        constexpr auto res = std::array<std::array<double,15>,15>{{
            {122,   138,   154,   170,   186,   202,   218,     9,    25,    41,    57,    73,    89,   105,   106},
            {139,   155,   171,   187,   203,   219,    10,    26,    42,    58,    74,    90,    91,   107,   123},
            {156,   172,   188,   204,   220,    11,    27,    43,    59,    75,    76,    92,   108,   124,   140},
            {173,   189,   205,   221,    12,    28,    44,    60,    61,    77,    93,   109,   125,   141,   157},
            {190,   206,   222,    13,    29,    45,    46,    62,    78,    94,   110,   126,   142,   158,   174},
            {207,   223,    14,    30,    31,    47,    63,    79,    95,   111,   127,   143,   159,   175,   191},
            {224,    15,    16,    32,    48,    64,    80,    96,   112,   128,   144,   160,   176,   192,   208},
            {  1,    17,    33,    49,    65,    81,    97,   113,   129,   145,   161,   177,   193,   209,   225},
            { 18,    34,    50,    66,    82,    98,   114,   130,   146,   162,   178,   194,   210,   211,     2},
            { 35,    51,    67,    83,    99,   115,   131,   147,   163,   179,   195,   196,   212,     3,    19},
            { 52,    68,    84,   100,   116,   132,   148,   164,   180,   181,   197,   213,     4,    20,    36},
            { 69,    85,   101,   117,   133,   149,   165,   166,   182,   198,   214,     5,    21,    37,    53},
            { 86,   102,   118,   134,   150,   151,   167,   183,   199,   215,     6,    22,    38,    54,    70},
            {103,   119,   135,   136,   152,   168,   184,   200,   216,     7,    23,    39,    55,    71,    87},
            {120,   121,   137,   153,   169,   185,   201,   217,     8,    24,    40,    56,    72,    88,   104},
        }};
    }

    NMTOOLS_TESTING_DECLARE_ARGS(case4) {
        using common_matrix::magic::m20x20;
        NMTOOLS_TESTING_DATA_DECLARE_ARRAY(x,m20x20);
        NMTOOLS_TESTING_DATA_DECLARE_MAT(x,20,20);
    }
    NMTOOLS_TESTING_DECLARE_EXPECT(case4) {
        constexpr auto res = std::array<std::array<double,20>,20>{{
            {400,    21,    41,   340,   320,   101,   121,   260,   240,   181,   201,   180,   160,   261,   281,   100,    80,   341,   361,    20},
            {  2,   379,   359,    62,    82,   299,   279,   142,   162,   219,   199,   222,   242,   139,   119,   302,   322,    59,    39,   382},
            {  3,   378,   358,    63,    83,   298,   278,   143,   163,   218,   198,   223,   243,   138,   118,   303,   323,    58,    38,   383},
            {397,    24,    44,   337,   317,   104,   124,   257,   237,   184,   204,   177,   157,   264,   284,    97,    77,   344,   364,    17},
            {396,    25,    45,   336,   316,   105,   125,   256,   236,   185,   205,   176,   156,   265,   285,    96,    76,   345,   365,    16},
            {  6,   375,   355,    66,    86,   295,   275,   146,   166,   215,   195,   226,   246,   135,   115,   306,   326,    55,    35,   386},
            {  7,   374,   354,    67,    87,   294,   274,   147,   167,   214,   194,   227,   247,   134,   114,   307,   327,    54,    34,   387},
            {393,    28,    48,   333,   313,   108,   128,   253,   233,   188,   208,   173,   153,   268,   288,    93,    73,   348,   368,    13},
            {392,    29,    49,   332,   312,   109,   129,   252,   232,   189,   209,   172,   152,   269,   289,    92,    72,   349,   369,    12},
            { 10,   371,   351,    70,    90,   291,   271,   150,   170,   211,   191,   230,   250,   131,   111,   310,   330,    51,    31,   390},
            { 11,   370,   350,    71,    91,   290,   270,   151,   171,   210,   190,   231,   251,   130,   110,   311,   331,    50,    30,   391},
            {389,    32,    52,   329,   309,   112,   132,   249,   229,   192,   212,   169,   149,   272,   292,    89,    69,   352,   372,     9},
            {388,    33,    53,   328,   308,   113,   133,   248,   228,   193,   213,   168,   148,   273,   293,    88,    68,   353,   373,     8},
            { 14,   367,   347,    74,    94,   287,   267,   154,   174,   207,   187,   234,   254,   127,   107,   314,   334,    47,    27,   394},
            { 15,   366,   346,    75,    95,   286,   266,   155,   175,   206,   186,   235,   255,   126,   106,   315,   335,    46,    26,   395},
            {385,    36,    56,   325,   305,   116,   136,   245,   225,   196,   216,   165,   145,   276,   296,    85,    65,   356,   376,     5},
            {384,    37,    57,   324,   304,   117,   137,   244,   224,   197,   217,   164,   144,   277,   297,    84,    64,   357,   377,     4},
            { 18,   363,   343,    78,    98,   283,   263,   158,   178,   203,   183,   238,   258,   123,   103,   318,   338,    43,    23,   398},
            { 19,   362,   342,    79,    99,   282,   262,   159,   179,   202,   182,   239,   259,   122,   102,   319,   339,    42,    22,   399},
            {381,    40,    60,   321,   301,   120,   140,   241,   221,   200,   220,   161,   141,   280,   300,    81,    61,   360,   380,     1},
        }};
    }

    NMTOOLS_TESTING_DECLARE_ARGS(case5) {
        using common_matrix::magic::m25x25;
        NMTOOLS_TESTING_DATA_DECLARE_ARRAY(x,m25x25);
        NMTOOLS_TESTING_DATA_DECLARE_MAT(x,25,25);
    }
    NMTOOLS_TESTING_DECLARE_EXPECT(case5) {
        constexpr auto res = std::array<std::array<double,25>,25>{{
            {327,   353,   379,   405,   431,   457,   483,   509,   535,   561,  587,   613,    14,    40,    66,    92,   118,   144,   170,   196,  222,   248,  274,   300,   301},
            {354,   380,   406,   432,   458,   484,   510,   536,   562,   588,  614,    15,    41,    67,    93,   119,   145,   171,   197,   223,  249,   275,  276,   302,   328},
            {381,   407,   433,   459,   485,   511,   537,   563,   589,   615,   16,    42,    68,    94,   120,   146,   172,   198,   224,   250,  251,   277,  303,   329,   355},
            {408,   434,   460,   486,   512,   538,   564,   590,   616,    17,   43,    69,    95,   121,   147,   173,   199,   225,   226,   252,  278,   304,  330,   356,   382},
            {435,   461,   487,   513,   539,   565,   591,   617,    18,    44,   70,    96,   122,   148,   174,   200,   201,   227,   253,   279,  305,   331,  357,   383,   409},
            {462,   488,   514,   540,   566,   592,   618,    19,    45,    71,   97,   123,   149,   175,   176,   202,   228,   254,   280,   306,  332,   358,  384,   410,   436},
            {489,   515,   541,   567,   593,   619,    20,    46,    72,    98,  124,   150,   151,   177,   203,   229,   255,   281,   307,   333,  359,   385,  411,   437,   463},
            {516,   542,   568,   594,   620,    21,    47,    73,    99,   125,  126,   152,   178,   204,   230,   256,   282,   308,   334,   360,  386,   412,  438,   464,   490},
            {543,   569,   595,   621,    22,    48,    74,   100,   101,   127,  153,   179,   205,   231,   257,   283,   309,   335,   361,   387,  413,   439,  465,   491,   517},
            {570,   596,   622,    23,    49,    75,    76,   102,   128,   154,  180,   206,   232,   258,   284,   310,   336,   362,   388,   414,  440,   466,  492,   518,   544},
            {597,   623,    24,    50,    51,    77,   103,   129,   155,   181,  207,   233,   259,   285,   311,   337,   363,   389,   415,   441,  467,   493,  519,   545,   571},
            {624,    25,    26,    52,    78,   104,   130,   156,   182,   208,  234,   260,   286,   312,   338,   364,   390,   416,   442,   468,  494,   520,  546,   572,   598},
            {  1,    27,    53,    79,   105,   131,   157,   183,   209,   235,  261,   287,   313,   339,   365,   391,   417,   443,   469,   495,  521,   547,  573,   599,   625},
            { 28,    54,    80,   106,   132,   158,   184,   210,   236,   262,  288,   314,   340,   366,   392,   418,   444,   470,   496,   522,  548,   574,  600,   601,     2},
            { 55,    81,   107,   133,   159,   185,   211,   237,   263,   289,  315,   341,   367,   393,   419,   445,   471,   497,   523,   549,  575,   576,  602,     3,    29},
            { 82,   108,   134,   160,   186,   212,   238,   264,   290,   316,  342,   368,   394,   420,   446,   472,   498,   524,   550,   551,  577,   603,    4,    30,    56},
            {109,   135,   161,   187,   213,   239,   265,   291,   317,   343,  369,   395,   421,   447,   473,   499,   525,   526,   552,   578,  604,     5,   31,    57,    83},
            {136,   162,   188,   214,   240,   266,   292,   318,   344,   370,  396,   422,   448,   474,   500,   501,   527,   553,   579,   605,    6,    32,   58,    84,   110},
            {163,   189,   215,   241,   267,   293,   319,   345,   371,   397,  423,   449,   475,   476,   502,   528,   554,   580,   606,     7,   33,    59,   85,   111,   137},
            {190,   216,   242,   268,   294,   320,   346,   372,   398,   424,  450,   451,   477,   503,   529,   555,   581,   607,     8,    34,   60,    86,  112,   138,   164},
            {217,   243,   269,   295,   321,   347,   373,   399,   425,   426,  452,   478,   504,   530,   556,   582,   608,     9,    35,    61,   87,   113,  139,   165,   191},
            {244,   270,   296,   322,   348,   374,   400,   401,   427,   453,  479,   505,   531,   557,   583,   609,    10,    36,    62,    88,  114,   140,  166,   192,   218},
            {271,   297,   323,   349,   375,   376,   402,   428,   454,   480,  506,   532,   558,   584,   610,    11,    37,    63,    89,   115,  141,   167,  193,   219,   245},
            {298,   324,   350,   351,   377,   403,   429,   455,   481,   507,  533,   559,   585,   611,    12,    38,    64,    90,   116,   142,  168,   194,  220,   246,   272},
            {325,   326,   352,   378,   404,   430,   456,   482,   508,   534,  560,   586,   612,    13,    39,    65,    91,   117,   143,   169,  195,   221,  247,   273,   299},
        }};
    }
}

#endif // NMTOOLS_TESTING_DATA_BLAS_TRANSPOSE_HPP