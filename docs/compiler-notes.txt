ðŸ˜­ðŸ˜­ðŸ˜­

template-template parameter
https://stackoverflow.com/questions/49171036/why-clang-fails-to-take-default-template-arguments-of-template-template-paramete
https://godbolt.org/z/GoEGsb

auto parameter
https://stackoverflow.com/questions/30665506/auto-not-allowed-in-function-prototype-with-clang

lambda capture
https://stackoverflow.com/questions/46114214/lambda-implicit-capture-fails-with-variable-declared-from-structured-binding
https://godbolt.org/z/YK7xTs

gcc<10 constexpr bug
https://godbolt.org/z/WYxahvxTx

constexpr math
error: constexpr function never produces a constant expression
https://godbolt.org/z/dxqq3T

Constexpr if with a non-bool condition
https://stackoverflow.com/questions/54899466/constexpr-if-with-a-non-bool-condition
https://godbolt.org/z/zTa9dW

gcc 7 internal compiler error: in tsubst, at cp/pt.c:13602 (works fine on gcc 8)
https://godbolt.org/z/7r7ToM

gcc 8 internal compiler error: in enclosing_instantiation_of, at cp/pt.c:13299 (works fine on gcc 9)
https://godbolt.org/z/7vcvPG8c1
solution: https://godbolt.org/z/Wa3aY3sjh

initializer list ctad
https://godbolt.org/z/bT6K7a
https://stackoverflow.com/questions/55205176/is-stdinitializer-listx-y-z-ctad-valid

braces around scalar initializer for type
https://godbolt.org/z/r9de57
http://clang-developers.42468.n3.nabble.com/braces-around-scalar-initializer-warning-should-be-error-td4063311.html

gcc error 8: mismatched types for 'double' and 'int' when initializing array (fixed on gcc 9)
https://godbolt.org/z/asrh7q

clang and gcc disagree on if constexpr inside lambda
https://godbolt.org/z/8qc13s
https://stackoverflow.com/questions/59647445/if-constexpr-with-static-assert-in-lambda-which-compiler-is-correct

clang and gcc disagree on partial specialization & sfinae, makes ambiguous instantiation on gcc but no issue on clang
https://godbolt.org/z/sW3as8

libc++ vs libstdc++
vector of bool omg
https://godbolt.org/z/T99cWj

gcc 8 lambda capture variable doesn't keep constexpr-ness: error: '__closure' is not a constant expression
supported on clang, fixed in gcc 9
https://godbolt.org/z/Tdn6Yvf3f

gcc and clang disagree on partial specialization & auto template parameter
compiles on clang, failed on gcc
https://godbolt.org/z/vjjMe588z
https://godbolt.org/z/9dT7defcs

clang warns unused variable on "if constexpr" inside lambda, while gcc doesn't
https://godbolt.org/z/fWd7YsfTj

clang complains about "error: call to implicitly-deleted default constructor" while gcc happily accepts
https://godbolt.org/z/f3hjnP9Tb

similar to above, but now it is gcc that complains "error: uninitialized const member" while clang accepts happily
https://godbolt.org/z/6Gc7cYjh4
solution: https://godbolt.org/z/7Eccbqc9Y

different warning on unused variables
https://godbolt.org/z/WPfvEWPEv

incompatible warning on "unused" private field:
clang rejects without [[maybe_unused]] -> https://godbolt.org/z/aMMzrbz4h
gcc rejects with [[maybe_unused]] -> https://godbolt.org/z/K8zPdz7a4

c++17 vs c++20 tuple<optional<...>>
https://godbolt.org/z/3cYacdd17

constexpr vs non-constexpr results in different result with the same args & functions
both gcc & clang produces the same result, inconsistent c++ compile-time vs runtime
https://godbolt.org/z/jrEGMz8so